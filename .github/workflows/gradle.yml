name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  #pull_request:
    #branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    #build 폴더를 삭제하고 다시 빌드
    - name: Build with Gradle
#      run: ./gradlew clean build --exclude-task test
      run: ./gradlew bootJar

    - name: docker image build
      run: docker build -t web .

#    - name: Set up QEMU
#      uses: docker/setup-qemu-action@v2
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v2

    - name: DockerHub Login
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: docker Hub push
      run: docker push jiyu1948/busan_moon

#    - name: Build and push Docker images
#      uses: docker/build-push-action@v4.1.1
#      with:
#          push: true
#          file: ./Dockerfile
#          tags: jiyu1948/${{ secrets.DOCKERHUB_REPO }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
#      - name: Transfer Deploy Script use SCP
#        uses: appleboy/scp-action@master
#        with:
#          username: ubuntu
#          host: ${{ secrets.HOST }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          source: "deploy.sh"
#          target: "/home/ubuntu/deploy"

      - name: DockerImagePull
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.EC2PUBLICDNS }} # EC2 인스턴스 퍼블릭 DNS
          key: ${{ secrets.EC2PRIVATE_KEY }} # pem 키
          # 도커 작업
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/web
#            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/second-eyes-nginx
            docker-compose up -d
            docker image prune -a -f